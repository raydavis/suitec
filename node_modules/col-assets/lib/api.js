/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var config = require('config');
var Embdr = require('embdr');
var Joi = require('joi');
var Sequelize = require('sequelize');
var util = require('util');

var ActivitiesAPI = require('col-activities');
var CanvasAPI = require('col-canvas');
var CategoriesAPI = require('col-categories');
var CollabosphereConstants = require('col-core/lib/constants');
var CollabosphereUtil = require('col-core/lib/util');
var DB = require('col-core/lib/db');
var log = require('col-core/lib/logger')('col-assets');
var UserConstants = require('col-users/lib/constants');

/**
 * Get a full asset profile. Next to the basic asset profile, this will return the whiteboard
 * elements in a form that Fabric.js can understand
 *
 * @param  {Context}        ctx                     Standard context containing the current user and the current course
 * @param  {Number}         id                      The id of the asset
 * @param  {Boolean}        incrementViews          Whether the total number of views for the asset should be incremented by 1
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {Asset}          callback.asset          The requested asset profile
 */
var getAssetProfile = module.exports.getAssetProfile = function(ctx, id, incrementViews, callback) {
  var opts = {
    'incrementViews': incrementViews,
    'includeWhiteboardElements': true
  };
  getAsset(ctx, id, opts, function(err, asset) {
    if (err) {
      return callback(err);
    }

    asset = asset.toJSON();
    asset.whiteboard_elements = _.pluck(asset.whiteboard_elements, ['element']);
    return callback(null, asset);
  });
};

/**
 * Get a basic asset profile
 *
 * @param  {Context}        ctx                                     Standard context containing the current user and the current course
 * @param  {Number}         id                                      The id of the asset
 * @param  {Object}         [opts]                                  A set of options that determine what data will be retrieved
 * @param  {Boolean}        [opts.incrementViews]                   Whether the total number of views for the asset should be incremented by 1
 * @param  {Boolean}        [opts.includeWhiteboardElements]        Whether the asset whiteboard elements should be included
 * @param  {Function}       callback                                Standard callback function
 * @param  {Object}         callback.err                            An error that occurred, if any
 * @param  {Asset}          callback.asset                          The requested asset
 */
var getAsset = module.exports.getAsset = function(ctx, id, opts, callback) {
  opts = opts || {};

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'opts': Joi.object().keys({
      'incrementViews': Joi.boolean().optional(),
      'includeWhiteboardElements': Joi.boolean().optional()
    })
  });

  var validationResult = Joi.validate({
    'id': id,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the asset from the DB
  var options = {
    'where': {
      'id': id,
      'course_id': ctx.course.id
    },
    'include': [
      {
        'model': DB.Activity,
        'attributes': ['type'],
        'required': false,
        'where': {
          'course_id': ctx.course.id,
          'user_id': ctx.user.id,
          'type': ['like', 'dislike'],
          'asset_id': id,
          'object_type': 'asset'
        }
      },
      {
        'model': DB.User,
        'as': 'users',
        'attributes': UserConstants.BASIC_USER_FIELDS
      },
      {
        'model': DB.Category
      },
      {
        'model': DB.Comment,
        'order': [['id', 'DESC']],
        'include': [{
          'model': DB.User,
          'attributes': UserConstants.BASIC_USER_FIELDS
        }]
      }
    ]
  };
  if (opts.includeWhiteboardElements) {
    options.include.push({
      'model': DB.AssetWhiteboardElement,
      'as': 'whiteboard_elements',
      'required': false
    });
  }
  DB.Asset.find(options).complete(function(err, asset) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to get an asset');
      return callback({'code': 500, 'msg': err.message});
    } else if (!asset) {
      log.debug({'err': err, 'id': id}, 'An asset with the specified id could not be found');
      return callback({'code': 404, 'msg': 'An asset with the specified id could not be found'});
    }

    return incrementViewsIfRequired(asset, opts.incrementViews, callback);
  });
};

/**
 * Increment the view count for an asset if required
 *
 * @param  {Asset}          asset                   The asset for which to increment the view count
 * @param  {Boolean}        incrementViews          Whether to increment the asset's view count or not
 * @param  {Function}       callback                Standard callback function
 * @param  {Object}         callback.err            An error that occurred, if any
 * @param  {Object}         callback.asset          The updated asset
 * @api private
 */
var incrementViewsIfRequired = function(asset, incrementViews, callback) {
  if (!incrementViews) {
    return callback(null, asset);
  }

  asset.increment('views').complete(function(err) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to increase the views on an asset');
      return callback({'code': 500, 'msg': err.message});
    }

    asset.views++;
    return callback(null, asset);
  });
};

/**
 * Get the assets for the current course
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Object}         [filters]                       A set of options to filter the results by
 * @param  {String}         [filters.keywords]              A string to filter the assets by
 * @param  {Number}         [filters.category]              The id of the category to filter the assets by
 * @param  {Number}         [filters.user]                  The id of the user who created the assets
 * @param  {String[]}       [filters.types]                 The type of assets. One or more of `CollabosphereConstants.ASSET.ASSET_TYPES`
 * @param  {Number}         [filters.assignment]            The id of the assignment to which the assets should belong
 * @param  {Number}         [limit]                         The maximum number of results to retrieve. Defaults to 10
 * @param  {Number}         [offset]                        The id of the asset to start paging from
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Object}         callback.assets                 The retrieved assets
 * @param  {Number}         callback.assets.total           The total number of assets in the current course matching the filters
 * @param  {Asset[]}        callback.assets.results         The paged assets in the current course
 */
var getAssets = module.exports.getAssets = function(ctx, filters, limit, offset, callback) {
  // Default some parameters
  filters = filters || {};
  limit = CollabosphereUtil.getNumberParam(limit, 10, 1, 25);
  offset = CollabosphereUtil.getNumberParam(offset);

  // Ensure the category, user id and assignment id are numbers
  filters.category = CollabosphereUtil.getNumberParam(filters.category);
  filters.user = CollabosphereUtil.getNumberParam(filters.user);
  filters.assignment = CollabosphereUtil.getNumberParam(filters.assignment);

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'filters': Joi.object().keys({
      'keywords': Joi.string().optional(),
      'category': Joi.number().optional(),
      'user': Joi.number().optional(),
      'types': Joi.array().items(Joi.string().valid(CollabosphereConstants.ASSET.ASSET_TYPES)).optional(),
      'assignment': Joi.number().optional()
    }),
    'limit': Joi.number().required(),
    'offset': Joi.number().optional()
  });
  var validationResult = Joi.validate({
    'filters': filters,
    'limit': limit,
    'offset': offset
  }, validationSchema);
  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the assets from the DB
  var where = {
    '$and': [
      {'course_id': ctx.course.id}
    ]
  };
  if (offset) {
    where.$and.push({'id': {'$lt': offset}});
  }

  if (filters.keywords) {
    // Replace spaces with wildcards so basic multi-term matching can happen
    var keywords = filters.keywords.trim().replace(/ /g, '%');
    where.$and.push({
      '$or': {
        'title': {
          '$iLike': '%' + keywords + '%'
        },
        'description': {
          '$iLike': '%' + keywords + '%'
        }
      }
    });
  }
  if (!_.isEmpty(filters.types)) {
    where.$and.push({'type': filters.types});
  }
  if (filters.assignment) {
    where.$and.push({'canvas_assignment_id': filters.assignment});
  }
  var queryOptions = {
    'where': where,
    'order': [['id', 'DESC']],
    'limit': limit,
    'include': [
      // Include whether the current user likes or dislikes the asset
      {
        'model': DB.Activity,
        'attributes': ['type'],
        'required': false,
        // `duplicating` is an (as of July 2015) undocumented feature of Sequelize. It's a hint to Sequelize
        // that although this is an M:N association, only 1 row will be returned
        'duplicating': false,
        'where': {
          'course_id': ctx.course.id,
          'user_id': ctx.user.id,
          'type': ['like', 'dislike'],
          'object_type': 'asset'
        }
      }
    ]
  };

  if (filters.category) {
    queryOptions.include.push({
      'model': DB.Category,
      'attributes': ['id'],
      'required': true,
      'duplicating': false,
      'where': {
        'course_id': ctx.course.id,
        'id': filters.category
      }
    });
  }

  if (filters.user) {
    queryOptions.include.push({
      'model': DB.User,
      'as': 'users',
      'required': true,
      'where': {'id': filters.user},
      'duplicating': false,
      'attributes': ['id']
    });
  }

  // Filter the assets
  DB.Asset.findAndCountAll(queryOptions).complete(function(err, result) {
    if (err) {
      log.error({'err': err, 'course': ctx.course}, 'Failed to get the assets in the current course');
      return callback({'code': 500, 'msg': err.message});
    }

    var data = {
      'total': result.count,
      'results': _.map(result.rows, function(asset) {
        return asset.toJSON();
      })
    };

    // Get all the users that are associated to each of the assets. We do this in a separate query so
    // each assets always has all collaborators associated to it, even when we're filtering the assets
    // by a specific user
    var userOptions = {
      'attributes': UserConstants.BASIC_USER_FIELDS,
      'include': [{
        'model': DB.Asset,
        'attributes': ['id'],
        'as': 'assets',
        'where': {
          'id': _.pluck(result.rows, 'id')
        }
      }]
    };
    DB.User.findAll(userOptions).complete(function(err, users) {
      if (err) {
        log.error({'err': err, 'course': ctx.course}, 'Failed to get the users for the assets in the current course');
        return callback({'code': 500, 'msg': err.message});
      }

      _.each(data.results, function(result) {
        result.users = _.filter(users, function(user) {
          return _.find(user.assets, {'id': result.id});
        });
      });

      _.each(data.results, function(result) {
        result.users = _.map(result.users, function(user) {
          user = user.toJSON();
          delete user.assets;
          return user;
        });
      });

      return callback(null, data);
    });
  });
};

/**
 * Create a new link asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         title                           The title of the link
 * @param  {String}         url                             The url of the link
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {Number}         [opts.assignment]               The id of the assignment the asset is part of, if any
 * @param  {Number[]}       [opts.categories]               The ids of the categories to which the link should be associated
 * @param  {String}         [opts.description]              The description of the link
 * @param  {String}         [opts.source]                   The source of the link
 * @param  {Boolean}        [opts.skipCreateActivity]       Whether creating an `add_asset` activity should be skipped. By default, the activity will be created
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The created link asset
 */
var createLink = module.exports.createLink = function(ctx, title, url, opts, callback) {
  // Default the title to the provided url
  title = title || url;

  // Default the optional values
  opts = opts || {};
  opts.categories = opts.categories || [];

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().max(255).required(),
    'url': Joi.string().uri().max(255).required(),
    'opts': Joi.object().keys({
      'assignment': Joi.number().optional(),
      'categories': Joi.array().unique().items(Joi.number()).optional(),
      'description': Joi.string().allow('').optional(),
      'source': Joi.string().uri().optional(),
      'skipCreateActivity': Joi.boolean().optional()
    })
  });

  var validationResult = Joi.validate({
    'title': title,
    'url': url,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the link asset in the DB
  var asset = DB.Asset.build({
    'course_id': ctx.course.id,
    'user_id': ctx.user.id,
    'type': 'link',
    'title': title,
    'url': url,
    'description': opts.description,
    'canvas_assignment_id': opts.assignment,
    'source': opts.source
  });

  return createAsset(ctx, asset, opts, callback);
};

/**
 * Create a new file asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {String}         title                           The title of the file
 * @param  {Object}         file                            The file to create
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {Number}         [opts.assignment]               The id of the assignment the asset is part of, if any
 * @param  {Number[]}       [opts.categories]               The ids of the categories to which the file should be associated
 * @param  {String}         [opts.description]              The description of the file
 * @param  {Boolean}        [opts.skipCreateActivity]       Whether creating an `add_asset` activity should be skipped. By default, the activity will be created
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The created file asset
 */
var createFile = module.exports.createFile = function(ctx, title, file, opts, callback) {
  file = file || {};
  // Default the title to the provided filename
  title = title || file.filename;

  // Default the optional values
  opts = opts || {};
  opts.categories = opts.categories || [];

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'title': Joi.string().required(),
    'file': Joi.object().required().keys({
      'field': Joi.any().valid('file').optional(),
      'encoding': Joi.string().optional(),
      'mimetype': Joi.string().required(),
      'truncated': Joi.boolean().valid(false).optional(),
      'uuid': Joi.string().guid().optional(),
      'file': Joi.string().required(),
      'filename': Joi.string().required()
    }),
    'opts': Joi.object().keys({
      'assignment': Joi.number().optional(),
      'categories': Joi.array().unique().items(Joi.number()).optional(),
      'description': Joi.string().allow('').optional(),
      'source': Joi.string().uri().optional(),
      'skipCreateActivity': Joi.boolean().optional()
    })
  });

  var validationResult = Joi.validate({
    'title': title,
    'file': file,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Upload the file to Canvas
  CanvasAPI.uploadFileToCanvas(ctx, file.file, function(err, canvasItem) {
    if (err) {
      return callback(err);
    }

    // Create the file asset in the DB
    var asset = DB.Asset.build({
      'course_id': ctx.course.id,
      'user_id': ctx.user.id,
      'type': 'file',
      'title': title,
      'download_url': canvasItem.url,
      'mime': canvasItem['content-type'],
      'description': opts.description,
      'canvas_assignment_id': opts.assignment,
      'source': opts.source
    });
    return createAsset(ctx, asset, opts, callback);
  });
};

/**
 * Create a new whiteboard asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Whiteboard}     whiteboard                      The whiteboard this asset is based on
 * @param  {String}         [title]                         The title of the whiteboard asset. Defaults to the whiteboard's title
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {Number[]}       [opts.categories]               The ids of the categories to which the whiteboard asset should be associated
 * @param  {String}         [opts.description]              The description of the whiteboard asset
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The created whiteboard asset
 */
var createWhiteboard = module.exports.createWhiteboard = function(ctx, whiteboard, title, opts, callback) {
  // Default the optional values
  opts = opts || {};
  opts.categories = opts.categories || [];

  if (!title && whiteboard) {
    title = whiteboard.title;
  }

  // Parameter validation. If no title is provided, we'll default it to the whiteboard title
  var validationSchema = Joi.object().keys({
    'whiteboard': Joi.object().type(Sequelize.Instance, 'Whiteboard'),
    'title': Joi.string().max(255).required(),
    'opts': Joi.object().keys({
      'categories': Joi.array().unique().items(Joi.number()).optional(),
      'description': Joi.string().allow('').optional()
    })
  });

  var validationResult = Joi.validate({
    'whiteboard': whiteboard,
    'title': title,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Create the whiteboard asset in the DB
  var asset = DB.Asset.build({
    'course_id': ctx.course.id,
    'type': 'whiteboard',
    'title': title,
    'description': opts.description,
    'source': whiteboard.id.toString(),
    'thumbnail_url': whiteboard.thumbnail_url
  });
  opts.users = whiteboard.members;
  createAsset(ctx, asset, opts, function(err, asset) {
    if (err) {
      return callback(err);
    }

    // Take a snapshot of the whiteboard by copying its elements into a separate table and linking
    // them to the new whiteboard asset
    var bulkWhiteboardelements = _.map(whiteboard.whiteboardElements, function(element) {
      return {
        // Prepend the current date to the `uid` as the same board can be exported multiple times
        'uid': util.format('%d-%s', Date.now(), element.uid),
        'element': element.element,
        'asset_id': asset.id
      };
    });
    DB.AssetWhiteboardElement.bulkCreate(bulkWhiteboardelements).complete(function(err) {
      if (err) {
        log.error({
          'err': err,
          'asset': asset.id,
          'whiteboard': whiteboard.id
        }, 'Unable to copy the whiteboard elements over to the asset whiteboard elements');
        return callback(err);
      }

      return getAssetProfile(ctx, asset.id, false, callback);
    });
  });
};

/**
 * Create a new asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Asset}          asset                           The asset to create
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {User[]}         [opts.users]                    The user(s) who created the asset, defaults to the current user
 * @param  {Number}         [opts.assignment]               The id of the assignment the asset is part of, if any
 * @param  {Number[]}       [opts.categories]               The ids of the categories to which the asset should be associated
 * @param  {Boolean}        [opts.skipCreateActivity]       Whether creating an `add_asset` activity should be skipped. By default, the activity will be created
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The persisted asset
 * @api private
 */
var createAsset = function(ctx, asset, opts, callback) {
  opts = opts || {};
  if (_.isEmpty(opts.users)) {
    opts.users = [ctx.user];
  }

  // Ensure that all provided categories exist
  CategoriesAPI.getCategoriesById(ctx, opts.categories, function(err, categories) {
    if (err) {
      return callback(err);
    }

    asset.save().complete(function(err, asset) {
      if (err) {
        log.error({'err': err}, 'Failed to create a new asset');
        return callback({'code': 500, 'msg': err.message});
      }

      // Add the associated categories to the asset
      asset.setCategories(opts.categories).complete(function(err) {
        if (err) {
          log.error({'err': err}, 'Failed to associate categories to a new asset');
          return callback({'code': 500, 'msg': err.message});
        }

        asset.setUsers(_.pluck(opts.users, 'id')).complete(function(err) {
          if (err) {
            log.error({'err': err}, 'Failed to associate the users to a new asset');
            return callback({'code': 500, 'msg': err.message});
          }

          // Generate the previews for the asset
          generatePreviews(asset);

          // Get the asset including the categories
          getAsset(ctx, asset.id, false, function(err, asset) {
            if (err) {
              return callback(err);
            } else if (opts.skipCreateActivity) {
              return callback(null, asset);
            }

            var errorCallback = _.once(callback);
            var done = _.after(opts.users.length, function() {
              // Retrieve the created asset, including the associated users and categories
              return getAssetProfile(ctx, asset.id, false, callback);
            });

            var activityType = 'add_asset';
            if (asset.type === 'whiteboard') {
              activityType = 'export_whiteboard';
            }

            // Give each user points for adding a new asset
            _.each(opts.users, function(user) {
              ActivitiesAPI.createActivity(ctx.course, user, activityType, asset.id, CollabosphereConstants.ACTIVITY.OBJECT_TYPES.ASSET, null, null, function(err) {
                if (err) {
                  log.error({'err': err}, 'Failed to create an activity for a user');
                  return errorCallback(err);
                }

                done();
              });
            });
          });
        });
      });
    });
  });
};

/**
 * Edit an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         id                              The id of the asset that is being edited
 * @param  {String}         title                           The updated title of the asset
 * @param  {Object}         [opts]                          A set of optional parameters
 * @param  {Number[]}       [opts.categories]               The updated ids of the categories to which the asset should be associated. If no categories are provided, any existing associated categories will be removed from the asset
 * @param  {String}         [opts.description]              The updated description of the asset
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The updated asset
 */
var editAsset = module.exports.editAsset = function(ctx, id, title, opts, callback) {
  opts = opts || {};
  opts.categories = opts.categories || [];
  opts.description = opts.description || '';

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'id': Joi.number().required(),
    'title': Joi.string().max(255).required(),
    'opts': Joi.object().keys({
      'categories': Joi.array().unique().items(Joi.number()).optional(),
      'description': Joi.string().allow('').optional()
    })
  });

  var validationResult = Joi.validate({
    'id': id,
    'title': title,
    'opts': opts
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Ensure that the provided asset exists
  getAsset(ctx, id, null, function(err, asset) {
    if (err) {
      return callback(err);
    }

    // Only course instructors and the user that has created the asset are allowed
    // to edit it
    if (!ctx.user.is_admin && !_.find(asset.users, {'id': ctx.user.id})) {
      log.error({'course': ctx.course}, 'Unauthorized to edit an asset');
      return callback({'code': 401, 'msg': 'Unauthorized to edit an asset'});
    }

    // Ensure that all provided categories exist
    CategoriesAPI.getCategoriesById(ctx, opts.categories, function(err, categories) {
      if (err) {
        return callback(err);
      }

      // Update the asset in the DB
      var update = {
        'title': title,
        'description': opts.description
      };
      asset.updateAttributes(update).complete(function(err, asset) {
        if (err) {
          log.error({'err': err, 'id': id}, 'Failed to update an asset');
          return callback({'code': 500, 'msg': err.message});
        }

        // Update the associated categories to the asset
        asset.setCategories(opts.categories).complete(function(err) {
          if (err) {
            log.error({'err': err}, 'Failed to update the categories of an asset');
            return callback({'code': 500, 'msg': err.message});
          }

          // Retrieve the created asset, including the associated user and
          // associated categories
          return getAssetProfile(ctx, asset.id, false, callback);
        });
      });
    });
  });
};

/**
 * Delete a set of assets. Note that this function does not perform any access checks.
 *
 * @param  {Context}      ctx               Standard context containing the current user and the current course
 * @param  {Number[]}     assetIds          The ids of the assets to delete
 * @param  {Function}     callback          Standard callback function
 * @param  {Object}       callback.err      An error that occurred, if any
 */
var deleteAssets = module.exports.deleteAssets = function(ctx, assetIds, callback) {
  if (_.isEmpty(assetIds)) {
    return callback();
  }

  // Parameter validation
  var validationSchema = Joi.object().keys({
    'assetIds': Joi.array().unique().items(Joi.number()).min(1)
  });

  var validationResult = Joi.validate({
    'assetIds': assetIds
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Before we destroy any assets, we fetch the activities that were related to them. That allows
  // the points for the users that interacted with these assets to be recalculated
  var activityOptions = {
    'where': {
      'asset_id': assetIds,
      'type': 'add_asset'
    }
  };
  DB.Activity.findAll(activityOptions).complete(function(err, activities) {
    if (err) {
      return callback({'code': 500, 'msg': 'Failed to get the activities that are associated to a set of assets'});
    }

    // "Destroy" the assets. Because the `Asset` model is in paranoid mode, records won't actually
    // be removed but flagged. That allows the activities to be linked to (now outdated) assets
    var assetOptions = {
      'where': {
        'id': assetIds
      }
    };
    DB.Asset.destroy(assetOptions).complete(function(err) {
      if (err) {
        log.error({'err': err, 'assets': assetIds}, 'Failed to delete a set of assets');
        return callback({'code': 500, 'msg': 'Failed to delete a set of assets'});
      }

      // Recalculate the points for the users who were involved with these assets
      var userIds = _.chain(activities).pluck('user_id').uniq().value();
      return ActivitiesAPI.recalculatePoints(ctx.course, userIds, callback);
    });
  });
};

/* PREVIEWS */

/**
 * Generate a thumbnail, large image preview and embed code for an asset
 *
 * @param  {Asset}          asset                           The asset for which previews are generated
 * @api private
 */
var generatePreviews = function(asset) {
  var assetUrl = null;
  if (asset.type === 'file' || asset.type === 'whiteboard') {
    assetUrl = asset.download_url;
  } else if (asset.type === 'link') {
    assetUrl = asset.url;
  }

  if (!config.get('embdr.enabled') || !assetUrl) {
    return false;
  }

  var embdr = new Embdr(config.get('embdr.apiKey'));
  embdr.process(assetUrl, {
    'start': function(preview) {
      updateAssetPreview(asset, {'embedCode': preview.embedCode});
    },
    'thumbnails': {
      'sizes': [CollabosphereConstants.THUMBNAIL_SIZE],
      'complete': function(thumbnails) {
        var thumbnail = thumbnails[CollabosphereConstants.THUMBNAIL_SIZE];
        if (thumbnail.url) {
          updateAssetPreview(asset, {'thumbnailUrl': thumbnail.url});
        }
      }
    },
    'images': {
      'sizes': [CollabosphereConstants.IMAGE_SIZE],
      'complete': function(images) {
        // Update all whiteboard elements that use this asset
        var image = images[CollabosphereConstants.IMAGE_SIZE];
        if (image && image.url) {
          require('col-whiteboards').updateAssetPreview(asset.id, image);
          updateAssetPreview(asset, {'imageUrl': image.url});
        }
      }
    },
    'error': function(err) {
      return log.error({'err': err, 'asset': asset.id}, 'An error occurred when generating an asset preview');
    }
  });
};

/**
 * Update the preview metadata for an asset
 *
 * @param  {Asset}          asset                           The asset for which the preview metadata is being updated
 * @param  {Object}         opts                            The preview metadata updates that need to be applied
 * @param  {String}         [opts.thumbnailUrl]             The updated thumbnail URL of the asset
 * @param  {String}         [opts.imageUrl]                 The updated large image URL of the asset
 * @param  {String}         [opts.embedCode]                The updated embed code of the asset
 */
var updateAssetPreview = module.exports.updateAssetPreview = function(asset, opts) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'thumbnailUrl': Joi.string().optional(),
    'imageUrl': Joi.string().optional(),
    'embedCode': Joi.string().optional()
  });

  var validationResult = Joi.validate(opts, validationSchema);

  if (validationResult.error) {
    return log.error({'err': validationResult.error.details[0].message, 'asset': asset.id, 'update': opts}, 'Validation error when updating the preview metadata for an asset');
  }

  // Update the asset preview metadata in the DB
  var update = {};
  if (opts.thumbnailUrl) {
    update.thumbnail_url = opts.thumbnailUrl;
  }
  if (opts.imageUrl) {
    update.image_url = opts.imageUrl;
  }
  if (opts.embedCode) {
    update.embed_code = opts.embedCode;
  }

  asset.updateAttributes(update).complete(function(err, asset) {
    if (err) {
      return log.error({'err': err, 'asset': asset.id, 'update': update}, 'Failed to update the preview metadata for an asset');
    }

    return log.trace({'asset': asset.id, 'update': update}, 'Successfully updated the preview metadata for an asset');
  });
};

/* COMMENTS */

/**
 * Get a comment.
 * Note that this is a private method that doesn't do any validation
 *
 * @param  {Number}         id                              The id of the comment to retrieve
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.comment                The created comment
 * @param  {User}           callback.comment.user           The user that created the comment
 * @api private
 */
var getComment = function(id, callback) {
  var options = {
    'where': {
      'id': id
    },
    'include': [{
      'model': DB.User,
      'attributes': UserConstants.BASIC_USER_FIELDS
    }]
  };
  DB.Comment.find(options).complete(function(err, comment) {
    if (err) {
      log.error({'err': err, 'id': id}, 'Failed to retrieve the created comment');
      return callback({'code': 500, 'msg': err.message});
    }

    return callback(null, comment);
  });
};

/**
 * Create a new comment on an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         assetId                         The id of the asset to which the comment is added
 * @param  {String}         body                            The body of the comment
 * @param  {Number}         [parent]                        The id of the comment to which the comment is a reply
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.comment                The created comment
 * @param  {User}           callback.comment.user           The user that created the comment
 */
var createComment = module.exports.createComment = function(ctx, assetId, body, parent, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'assetId': Joi.number().required(),
    'body': Joi.string().required(),
    'parent': Joi.number().optional()
  });

  var validationResult = Joi.validate({
    'assetId': assetId,
    'body': body,
    'parent': parent
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the asset to which the comment is being added
  getAsset(ctx, assetId, null, function(err, asset) {
    if (err) {
      return callback(err);
    }

    // Check that the comment to which this comment is a reply exists
    if (parent) {
      // Ensure the parent id is a number
      parent = CollabosphereUtil.getNumberParam(parent);
      var parentComment = _.findWhere(asset.toJSON().comments, {'id': parent});
      if (!parentComment) {
        log.error({'err': err, 'parent': parent}, 'Failed to find the comment to which a reply is being made');
        return callback({'code': 400, 'msg': 'Failed to find the comment to which a reply is being made'});
      }
    }

    // Create the link asset in the database
    var comment = {
      'asset_id': assetId,
      'user_id': ctx.user.id,
      'parent_id': parent,
      'body': body
    };

    DB.Comment.create(comment).complete(function(err, comment) {
      if (err) {
        log.error({'err': err}, 'Failed to create a new comment');
        return callback({'code': 500, 'msg': err.message});
      }

      // Increase the comment count
      asset.increment('comment_count').complete(function(err) {
        if (err) {
          log.error({'err': err, 'asset': asset.id}, 'Failed to increment the comment count of an asset');
          return callback({'code': 500, 'msg': err.message});
        }

        asset.comment_count++;

        // Retrieve the created comment, including the associated user
        getComment(comment.id, callback);
      });
    });
  });
};

/**
 * Edit a comment on an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         assetId                         The id of the asset to which the comment belongs
 * @param  {Number}         id                              The id of the comment that is being edited
 * @param  {String}         body                            The updated comment body
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Comment}        callback.comment                The updated comment
 * @param  {User}           callback.comment.user           The user that created the comment
 */
var editComment = module.exports.editComment = function(ctx, assetId, id, body, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'assetId': Joi.number().required(),
    'id': Joi.number().required(),
    'body': Joi.string().required()
  });

  var validationResult = Joi.validate({
    'assetId': assetId,
    'id': id,
    'body': body
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the comment that is being edited
  var options = {
    'where': {
      'id': id,
      'asset_id': assetId
    },
    'include': [DB.Asset]
  };

  DB.Comment.find(options).complete(function(err, comment) {
    if (err) {
      log.error({'err': err, 'id': id, 'assetId': assetId}, 'Failed to retrieve the comment to update');
      return callback({'code': 500, 'msg': err.message});
    } else if (!comment) {
      log.debug({'err': err, 'id': id, 'assetId': assetId}, 'The comment that is being edited could not be found');
      return callback({'code': 404, 'msg': 'The comment that is being edited could not be found'});
    }

    // Verify that the user is allowed to edit the comment. A user is
    // only able to edit a comment when the user manages the course or
    // the comment is their own
    if ((!ctx.user.is_admin || comment.asset.course_id !== ctx.course.id) && comment.user_id !== ctx.user.id) {
      log.error({'assetId': assetId, 'id': id}, 'Unauthorized to edit the comment');
      return callback({'code': 401, 'msg': 'Unauthorized to edit the comment'});
    }

    // Update the comment
    var update = {
      'body': body
    };

    comment.updateAttributes(update).complete(function(err, comment) {
      if (err) {
        log.error({'err': err}, 'Failed to update a comment');
        return callback({'code': 500, 'msg': err.message});
      }

      // Retrieve the updated comment, including the associated user
      getComment(comment.id, callback);
    });
  });
};

/**
 * Delete a comment on an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         assetId                         The id of the asset to which the comment belongs
 * @param  {Number}         id                              The id of the comment that is being deleted
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 */
var deleteComment = module.exports.deleteComment = function(ctx, assetId, id, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'assetId': Joi.number().required(),
    'id': Joi.number().required()
  });

  var validationResult = Joi.validate({
    'assetId': assetId,
    'id': id
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the comment that is being deleted
  var options = {
    'where': {
      'id': id,
      'asset_id': assetId
    },
    'include': [DB.Asset]
  };

  DB.Comment.find(options).complete(function(err, comment) {
    if (err) {
      log.error({'err': err, 'id': id, 'assetId': assetId}, 'Failed to retrieve the comment to delete');
      return callback({'code': 500, 'msg': err.message});
    } else if (!comment) {
      log.debug({'err': err, 'id': id, 'assetId': assetId}, 'The comment that is being deleted could not be found');
      return callback({'code': 404, 'msg': 'The comment that is being deleted could not be found'});
    }

    // Verify that the user is allowed to delete the comment. A user is
    // only able to delete a comment when the user manages the course or
    // the comment is their own
    if ((!ctx.user.is_admin || comment.asset.course_id !== ctx.course.id) && comment.user_id !== ctx.user.id) {
      log.error({'assetId': assetId, 'id': id}, 'Unauthorized to delete the comment');
      return callback({'code': 401, 'msg': 'Unauthorized to delete the comment'});
    }

    // Verify that the comment doesn't have any replies. A comment can not
    // be removed if it has any existing replies
    options = {
      'where': {
        'parent_id': id,
        'asset_id': assetId
      }
    };

    DB.Comment.findAll(options).complete(function(err, comments) {
      if (err) {
        log.error({'err': err, 'id': id, 'assetId': assetId}, 'Failed to retrieve the replies of the comment to delete');
        return callback({'code': 500, 'msg': err.message});
      }

      // The comment can not be deleted if it has any replies
      if (comments.length > 0) {
        log.error({'assetId': assetId, 'id': id}, 'The comment can not be deleted as it has replies');
        return callback({'code': 400, 'msg': 'The comment can not be deleted as it has replies'});
      }

      comment.destroy().complete(function(err) {
        if (err) {
          log.error({'err': err, 'category': category.id}, 'Failed to delete a comment');
          return callback({'code': 500, 'msg': err.message});
        }

        // Decrease the comment count
        comment.asset.decrement('comment_count').complete(function(err, asset) {
          if (err) {
            log.error({'err': err, 'asset': comment.asset.id}, 'Failed to decrement the comment count of an asset');
            return callback({'code': 500, 'msg': err.message});
          }

          asset.comment_count--;

          // TODO: Delete the points for the comment

          return callback();
        });
      });
    });
  });
};

/* (DIS)LIKING */

/**
 * Like or dislike an asset
 *
 * @param  {Context}        ctx                             Standard context containing the current user and the current course
 * @param  {Number}         assetId                         The id of the asset that is liked or disliked
 * @param  {Boolean}        [like]                          `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 */
var like = module.exports.like = function(ctx, assetId, like, callback) {
  // Parameter validation
  var validationSchema = Joi.object().keys({
    'assetId': Joi.number().required(),
    'like': Joi.boolean().optional()
  });

  var validationResult = Joi.validate({
    'assetId': assetId,
    'like': like
  }, validationSchema);

  if (validationResult.error) {
    return callback({'code': 400, 'msg': validationResult.error.details[0].message});
  }

  // Get the asset that is being liked or disliked
  getAsset(ctx, assetId, null, function(err, asset) {
    if (err) {
      return callback(err);
    }

    // Users are not able to like or dislike their own assets
    if (_.find(asset.users, {'id': ctx.user.id})) {
      return callback({'code': 401, 'msg': 'You can not like or dislike your own assets'});
    }

    // Remove the previous like or dislike
    ActivitiesAPI.deleteActivity(ctx.course, ctx.user, ['like', 'dislike'], asset.id, CollabosphereConstants.ACTIVITY.OBJECT_TYPES.ASSET, null, function(err, deletedLike) {
      if (err) {
        return callback(err);
      }

      // Remove the previous get like or get dislike activities
      deleteGetLikeActivities(ctx, asset, function(err) {
        if (err) {
          return callback(err);
        }

        // Update the like and dislike count on the asset
        updateAssetLikeCount(asset, like, deletedLike, function(err, asset) {
          if (err) {
            return callback(err);
          }

          // If a like or dislike is being undone, no further actions are required
          if (!_.isBoolean(like)) {
            return callback();
          }

          // Add the like / dislike activity
          var type = 'dislike';
          if (like) {
            type = 'like';
          }

          ActivitiesAPI.createActivity(ctx.course, ctx.user, type, asset.id, CollabosphereConstants.ACTIVITY.OBJECT_TYPES.ASSET, null, null, function(err) {
            if (err) {
              return callback(err);
            }

            // Add the get like / get dislike activities
            type = 'get_dislike';
            if (like) {
              type = 'get_like';
            }

            return createGetLikeActivities(ctx, asset, type, callback);
          });
        });
      });
    });
  });
};

/**
 * Delete all the `get_like` or `get_dislike` activities created by the current user in context for
 * each author of the asset
 *
 * @param  {Context}        ctx               Standard context containing the current user and the current course
 * @param  {Asset}          asset             The asset for which the like or dislike should be deleted
 * @param  {Function}       callback          Standard callback function
 * @param  {Object}         callback.err      An error that occurred, if any
 * @api private
 */
var deleteGetLikeActivities = function(ctx, asset, callback) {
  var done = _.after(asset.users.length, callback);
  var errorCallback = _.once(callback);
  _.each(asset.users, function(user) {
    ActivitiesAPI.deleteActivity(ctx.course, user, ['get_like', 'get_dislike'], asset.id, CollabosphereConstants.ACTIVITY.OBJECT_TYPES.ASSET, ctx.user, function(err) {
      if (err) {
        log.error({
          'err': err,
          'user': user.id
        }, 'Failed to delete the get_like or get_dislike activities on an asset for a user');
        return errorCallback(err);
      }

      return done();
    });
  });
};

/**
 * Create a `get_like` or `get_dislike` activity for each author of the asset
 *
 * @param  {Context}        ctx               Standard context containing the current user and the current course
 * @param  {Asset}          asset             The asset that is liked or disliked
 * @param  {String}         type              Which type of activities the asset users are getting. One of `get_like` or `get_dislike`
 * @param  {Function}       callback          Standard callback function
 * @param  {Object}         callback.err      An error that occurred, if any
 * @api private
 */
var createGetLikeActivities = function(ctx, asset, type, callback) {
  var done = _.after(asset.users.length, callback);
  var errorCallback = _.once(callback);
  _.each(asset.users, function(user) {
    ActivitiesAPI.createActivity(ctx.course, user, type, asset.id, CollabosphereConstants.ACTIVITY.OBJECT_TYPES.ASSET, null, ctx.user, function(err) {
      if (err) {
        log.error({
          'err': err,
          'user': user.id
        }, 'Failed to create the get_like or get_dislike activities on an asset for a user');
        return errorCallback(err);
      }

      return done();
    });
  });
};

/**
 * Adjust the cached like and dislike count on an asset after removing a previous like or dislike
 *
 * @param  {Asset}          asset                           The asset for which to update the like and dislike count
 * @param  {Boolean}        like                            `true` when the asset should be liked, `false` when the asset should be disliked. When `null` is provided, the previous like or dislike will be undone
 * @param  {Activity}       deletedLike                     The removed like or dislike activity on the asset
 * @param  {Function}       callback                        Standard callback function
 * @param  {Object}         callback.err                    An error that occurred, if any
 * @param  {Asset}          callback.asset                  The updated asset
 * @api private
 */
var updateAssetLikeCount = function(asset, like, deletedLike, callback) {
  var likeDelta = 0;
  var dislikeDelta = 0;
  if (deletedLike) {
    if (deletedLike.type === 'like') {
      likeDelta--;
    } else {
      dislikeDelta--;
    }
  }
  if (like === true) {
    likeDelta++;
  } else if (like === false) {
    dislikeDelta++;
  }

  asset.increment({'likes': likeDelta, 'dislikes': dislikeDelta}).complete(function(err, asset) {
    if (err) {
      log.error({'err': err, 'asset': asset}, 'Failed to update the like and dislike count on an asset');
      return callback({'code': 500, 'msg': err.message});
    }

    asset.likes += likeDelta;
    asset.dislikes += dislikeDelta;

    return callback(null, asset);
  });
};
