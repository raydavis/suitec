/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var assert = require('assert');

var AssetsTestUtil = require('col-assets/tests/util');
var TestsUtil = require('col-tests');
var UsersTestsUtil = require('col-users/tests/util');

var ActivitiesTestUtil = require('./util');

describe('Activity Points', function() {

  /**
   * Test that verifies that users do not earn points for disabled activities
   */
  it('does not update the points for disabled activities', function(callback) {
    TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
      TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {
          var instructorUser = TestsUtil.generateInstructor();
          TestsUtil.getAssetLibraryClient(null, course, instructorUser, function(instructorClient, course, instructorUser) {

            var activityTypeOverride = [{
              'type': 'add_asset',
              'enabled': false
            }];
            ActivitiesTestUtil.assertEditActivityTypeConfiguration(instructorClient, course, activityTypeOverride, function() {

              // As no activities have occurred yet, each user should have 0 points
              UsersTestsUtil.assertGetLeaderboard(instructorClient, course, 4, true, function(users) {
                _.each(users, function(user) {
                  assert.strictEqual(user.points, 0);
                });

                // Each user adds an asset
                AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset1) {
                  AssetsTestUtil.assertCreateLink(client2, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset2) {
                    AssetsTestUtil.assertCreateLink(client3, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset3) {

                      // Because we disabled the `add_asset`, each user should still have 0 points
                      UsersTestsUtil.assertGetLeaderboard(instructorClient, course, 4, true, function(users) {
                        _.each(users, function(user) {
                          assert.strictEqual(user.points, 0);
                        });

                        // Each user likes another asset
                        AssetsTestUtil.assertLike(client1, course, asset2.id, true, function() {
                          AssetsTestUtil.assertLike(client2, course, asset3.id, true, function() {
                            AssetsTestUtil.assertLike(client3, course, asset1.id, true, function() {

                              // As the `like` and `get_like` activities are still enabled, users should still earn points
                              ActivitiesTestUtil.assertGetActivityTypeConfiguration(instructorClient, course, function(configuration) {
                                var likePoints = _.find(configuration, {'type': 'like'}).points;
                                var getLikePoints = _.find(configuration, {'type': 'get_like'}).points;
                                UsersTestsUtil.assertGetLeaderboard(instructorClient, course, 4, true, function(users) {
                                  _.each(users, function(user) {
                                    if (!user.is_admin) {
                                      assert.strictEqual(user.points, likePoints + getLikePoints);
                                    }
                                  });

                                  return callback();
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Create a new asset', function() {

    /**
     * Test that verifies that creating a new link asset updates the points for the creator
     */
    it('updates the points', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client, course, user) {
        // Verify that creating a new link asset correctly updates the points
        ActivitiesTestUtil.assertCreateLinkActivity(client, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset1) {
          // Verify that creating another link asset correctly updates the points
          ActivitiesTestUtil.assertCreateLinkActivity(client, course, 'UC Berkeley', 'http://www.berkeley.edu/', null, function(asset2) {
            return callback();
          });
        });
      });
    });
  });

  describe('Liking', function() {

    /**
     * Test that verifies that liking an asset updates the points for the liker and the
     * user receiving the like
     */
    it('updates the points when liking', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that liking an asset correctly updates the points
          TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
            ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, true, function() {

              // Verify that re-liking an asset doesn't update the points
              ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, true, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that disliking an asset updates the points for the disliker and the
     * user receiving the dislike
     */
    it('updates the points when disliking', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that disliking an asset correctly updates the points
          TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
            ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, false, function() {

              // Verify that re-disliking an asset doesn't update the points
              ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, false, function() {

                return callback();
              });
            });
          });
        });
      });
    });

    /**
     * Test that verifies that updating a like or dislike updates the points for the (dis)liker and the
     * user receiving the (dis)like
     */
    it('updates the points when liking or disliking', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {

          // Verify that undoing a like updates the points
          TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
            ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, true, function() {
              ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, null, function() {

                // Verify that undoing a dislike updates the points
                ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, false, function() {
                  ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, null, function() {

                    // Verify that switching a dislike to a like updates the points
                    ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, false, function() {
                      ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, true, function() {

                        // Verify that switching a like to a dislike updates the points
                        ActivitiesTestUtil.assertLikeActivity(client2, client1, course, asset.id, false, function() {

                          return callback();
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  describe('Comments', function() {

    /**
     * Test that verifies that creating a comment updates the points for the appropriate users
     */
    it('updates the points when commenting', function(callback) {
      // Bump the default test time-out as this test is doing quite a few things
      this.timeout(5000);

      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {

            // Each user creates an asset
            AssetsTestUtil.assertCreateLink(client1, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset1) {
              AssetsTestUtil.assertCreateLink(client2, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset2) {
                AssetsTestUtil.assertCreateLink(client3, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset3) {

                  // Top level comment on an asset from the current user
                  ActivitiesTestUtil.assertCreateCommentActivity(client1, client1, course, asset1.id, function() {
                    // Top level comment on an asset from another user
                    ActivitiesTestUtil.assertCreateCommentActivity(client1, client2, course, asset2.id, function() {

                      // Create some top-level comments
                      AssetsTestUtil.assertCreateComment(client1, course, asset1.id, 'A top-level comment by user 1 on asset 1', null, function(commentOnAsset1By1) {
                        AssetsTestUtil.assertCreateComment(client2, course, asset1.id, 'A top-level comment by user 2 on asset 1', null, function(commentOnAsset1By2) {
                          AssetsTestUtil.assertCreateComment(client3, course, asset1.id, 'A top-level comment by user 3 on asset 1', null, function(commentOnAsset1By3) {
                            AssetsTestUtil.assertCreateComment(client1, course, asset2.id, 'A top-level comment by user 1 on asset 2', null, function(commentOnAsset2By1) {
                              AssetsTestUtil.assertCreateComment(client2, course, asset2.id, 'A top-level comment by user 2 on asset 2', null, function(commentOnAsset2By2) {
                                AssetsTestUtil.assertCreateComment(client3, course, asset2.id, 'A top-level comment by user 3 on asset 2', null, function(commentOnAsset2By3) {

                                  // Reply on a comment from the current user on an asset from the current user
                                  ActivitiesTestUtil.assertCreateReplyActivity(client1, client1, client1, course, asset1.id, commentOnAsset1By1.id, function() {
                                    // Reply on a comment from another user on an asset from the current user
                                    ActivitiesTestUtil.assertCreateReplyActivity(client1, client1, client2, course, asset1.id, commentOnAsset1By2.id, function() {
                                      // Reply on a comment from the current user on an asset from another user
                                      ActivitiesTestUtil.assertCreateReplyActivity(client1, client2, client1, course, asset2.id, commentOnAsset2By1.id, function() {
                                        // Reply on a comment from another user on an asset from that other user
                                        ActivitiesTestUtil.assertCreateReplyActivity(client1, client2, client2, course, asset2.id, commentOnAsset2By2.id, function() {
                                          // Reply on a comment from another user on an asset from yet another user
                                          ActivitiesTestUtil.assertCreateReplyActivity(client1, client2, client3, course, asset2.id, commentOnAsset2By3.id, function() {
                                            return callback();
                                          });
                                        });
                                      });
                                    });
                                  });
                                });
                              });
                            });
                          });
                        });
                      });
                    });
                  });
                });
              });
            });
          });
        });
      });
    });

    /**
     * Create an asset, comment on it and verify that the points are properly adjusted when the
     * comment is deleted
     *
     * @param  {RestClient}         commenterClient                 The REST client representing the user will be deleting the comment
     * @param  {RestClient}         creatorClient                   The REST client representing the user that should own the asset
     * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
     * @param  {Function}           callback                        Standard callback function
     */
    var verifyDeleteCommentActivity = function(commenterClient, creatorClient, course, callback) {
      AssetsTestUtil.assertCreateLink(creatorClient, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
        AssetsTestUtil.assertCreateComment(commenterClient, course, asset.id, 'Comment 1', null, function(comment) {

          ActivitiesTestUtil.assertDeleteCommentActivity(commenterClient, creatorClient, course, asset.id, comment.id, callback);
        });
      });
    };

    /**
     * Test that verifies that deleting a comment updates the points for the appropriate users
     */
    it('updates the points when deleting a comment', function(callback) {
      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {

          verifyDeleteCommentActivity(client1, client1, course, function() {
            verifyDeleteCommentActivity(client1, client2, course, function() {
              return callback();
            });
          });
        });
      });
    });

    /**
     * Create an asset, comment and reply and verify that the points are properly adjusted when the
     * reply is deleted
     *
     * @param  {RestClient}         commenterClient                 The REST client representing the user will be deleting the comment
     * @param  {RestClient}         creatorClient                   The REST client representing the user that should own the asset
     * @param  {RestClient}         parentClient                    The REST client representing the user that will make the parent comment
     * @param  {Course}             course                          The Canvas course in which the user is interacting with the API
     * @param  {Function}           callback                        Standard callback function
     */
    var verifyDeleteReplyActivity = function(commenterClient, creatorClient, parentClient, course, callback) {
      AssetsTestUtil.assertCreateLink(creatorClient, course, 'UC Davis', 'http://www.ucdavis.edu/', null, function(asset) {
        AssetsTestUtil.assertCreateComment(parentClient, course, asset.id, 'Comment 1', null, function(comment) {
          AssetsTestUtil.assertCreateComment(commenterClient, course, asset.id, 'Reply on comment 1', comment.id, function(reply) {

            ActivitiesTestUtil.assertDeleteReplyActivity(commenterClient, creatorClient, parentClient, course, asset.id, reply.id, callback);
          });
        });
      });
    };

    /**
     * Test that verifies that deleting a reply on a comment updates the points for the appropriate users
     */
    it('updates the points when deleting a reply on a comment', function(callback) {
      // Bump the default test time-out as this test is doing quite a few things
      this.timeout(5000);

      TestsUtil.getAssetLibraryClient(null, null, null, function(client1, course, user1) {
        TestsUtil.getAssetLibraryClient(null, course, null, function(client2, course, user2) {
          TestsUtil.getAssetLibraryClient(null, course, null, function(client3, course, user3) {

            // A user deletes a reply on a comment of their own on an asset they own
            verifyDeleteReplyActivity(client1, client1, client1, course, function() {
              // A user deletes a reply on a comment of another user on an asset they own
              verifyDeleteReplyActivity(client1, client1, client2, course, function() {
                // A user deletes a reply on a comment of their own on an asset of another user
                verifyDeleteReplyActivity(client1, client2, client1, course, function() {
                  // A user deletes a reply on a comment of another user on an asset owned by that other user
                  verifyDeleteReplyActivity(client1, client2, client2, course, function() {
                    // A user deletes a reply on a comment of another user on an asset owned by yet another user
                    verifyDeleteReplyActivity(client1, client2, client3, course, function() {
                      return callback();
                    });
                  });
                });
              });
            });
          });
        });
      });
    });
  });
});
