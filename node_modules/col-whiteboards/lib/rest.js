/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var _ = require('lodash');
var util = require('util');

var Collabosphere = require('col-core');
var CollabosphereUtil = require('col-core/lib/util');

var WhiteboardsAPI = require('./api');

/*!
 * Get a whiteboard
 */
Collabosphere.apiRouter.get('/whiteboards/:id', function(req, res) {
  WhiteboardsAPI.getWhiteboardProfile(req.ctx, req.params.id, function(err, whiteboard) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    return res.status(200).send(whiteboard);
  });
});

/*!
 * Get the whiteboards to which the current user has access in the current course
 */
Collabosphere.apiRouter.get('/whiteboards', function(req, res) {
  WhiteboardsAPI.getWhiteboards(req.ctx, req.query.limit, req.query.offset, function(err, whiteboards) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    return res.status(200).send(whiteboards);
  });
});

/*!
 * Create a new whiteboard
 */
Collabosphere.apiRouter.post('/whiteboards', function(req, res) {
  var members = CollabosphereUtil.toArray(req.body.members);
  // Ensure that all member ids are proper numbers
  members = _.map(members, function(member) {
    return parseInt(member, 10);
  });

  WhiteboardsAPI.createWhiteboard(req.ctx, req.body.title, members, function(err, createdWhiteboard) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    return res.status(201).send(createdWhiteboard);
  });
});

/*!
 * Edit a whiteboard
 */
Collabosphere.apiRouter.post('/whiteboards/:id', function(req, res) {
  var members = CollabosphereUtil.toArray(req.body.members);
  // Ensure that all member ids are proper numbers
  members = _.map(members, function(member) {
    return parseInt(member, 10);
  });

  WhiteboardsAPI.editWhiteboard(req.ctx, req.params.id, req.body.title, members, function(err, updatedWhiteboard) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    return res.status(200).send(updatedWhiteboard);
  });
});

/*!
 * Get the most recent chat messages for a whiteboard
 */
Collabosphere.apiRouter.get('/whiteboards/:id/chat', function(req, res) {
  WhiteboardsAPI.getChatMessages(req.ctx, req.params.id, req.query.before, req.query.limit, function(err, chatMessages) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    return res.status(200).send(chatMessages);
  });
});

/*!
 * Export a whiteboard to an asset
 */
Collabosphere.apiRouter.post('/whiteboards/:id/export/asset', function(req, res) {
  var categories = CollabosphereUtil.toArray(req.body.categories);
  var opts = {
    'categories': categories,
    'description': req.body.description
  };
  WhiteboardsAPI.exportWhiteboardToAsset(req.ctx, req.params.id, req.body.title, opts, function(err, asset) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    res.status(201).send(asset);
  });
});

/*!
 * Export a whiteboard to a PNG image
 */
Collabosphere.apiRouter.get('/whiteboards/:id/export/png', function(req, res) {
  WhiteboardsAPI.exportWhiteboardToPng(req.ctx, req.params.id, function(err, whiteboard, stream) {
    if (err) {
      return res.status(err.code).send(err.msg);
    }

    // Get a title with all non-alphanumerical characters replaced by dashes. This string
    // will be used as the suggested filename when downloading the PNG file
    var title = whiteboard.title.replace(/[^A-Za-z0-9]/g, '-');
    res.set('Content-Disposition', util.format('attachment; filename="%s.png"', title));

    // If a downloadId parameter was provided, we set a cookie with it. That way the UI can monitor
    // whether a whiteboard has been exported
    var downloadId = req.query.downloadId;
    if (downloadId) {
      var cookieName = util.format('whiteboard.%s.png', downloadId);
      res.cookie(cookieName, 'true', {'expires': 0});
    }

    stream.pipe(res);
  });
});
