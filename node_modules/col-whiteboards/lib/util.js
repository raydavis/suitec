/**
 * Copyright 2015 UC Berkeley (UCB) Licensed under the
 * Educational Community License, Version 2.0 (the "License"); you may
 * not use this file except in compliance with the License. You may
 * obtain a copy of the License at
 *
 *     http://opensource.org/licenses/ECL-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an "AS IS"
 * BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
 * or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

var fabric = require('fabric').fabric;

/**
 * Extend the Fabric.js `toObject` deserialization function to include
 * the property that uniquely identifies an object on the canvas, as well as
 * a property containing the index of the object relative to the other items
 * on the canvas
 */
fabric.Object.prototype.toObject = (function(toObject) {
  return function() {
    return fabric.util.object.extend(toObject.call(this), {
      'uid': this.uid,
      'index': canvas.getObjects().indexOf(this)
    });
  };
})(fabric.Object.prototype.toObject);

// Ensure that the horizontal and vertical origins of objects are set to center
fabric.Object.prototype.originX = fabric.Object.prototype.originY = 'center';

/**
 * Get a Fabric.JS canvas object
 *
 * @param  {Number}     width     The width of the desired Canvas object
 * @param  {Number}     height    The height of the desired Canvas object
 * @return {Canvas}               A Fabric.JS canvas object
 */
var getCanvas = module.exports.getCanvas = function(width, height) {
  return fabric.createCanvasForNode(width, height);
};

/**
 * Convert a serialized Fabric.js canvas element to a proper Fabric.js canvas element
 *
 * @param  {Object}         element           The serialized Fabric.js canvas element to deserialize
 * @param  {Function}       callback          Standard callback function
 * @param  {Object}         callback.element  The deserialized Fabric.js canvas element
 */
var deserializeElement = module.exports.deserializeElement = function(element, callback) {
  // Extract the type from the serialized element
  var type = fabric.util.string.camelize(fabric.util.string.capitalize(element.type));
  if (element.type === 'image') {
    // In order to avoid cross-domain errors when loading images from different domains,
    // the source of the element needs to be temporarily cleared and set manually once
    // the element has been created
    element.realSrc = element.src;
    element.src = '';
    fabric[type].fromObject(element, function(element) {
      element.setSrc(element.get('realSrc'), function() {
        return callback(element);
      });
    });
  } else if (fabric[type].async) {
    fabric[type].fromObject(element, callback);
  } else {
    return callback(fabric[type].fromObject(element));
  }
};
